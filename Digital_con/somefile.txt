# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin sqlcustom [app_label]'
# into your database.
from __future__ import unicode_literals

from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=80)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup)
    permission = models.ForeignKey('AuthPermission')

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group_id', 'permission_id'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType')
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type_id', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=30)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser)
    group = models.ForeignKey(AuthGroup)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user_id', 'group_id'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser)
    permission = models.ForeignKey(AuthPermission)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user_id', 'permission_id'),)


class BaseLanguageExport(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    lang = models.CharField(max_length=-1)
    state = models.CharField(max_length=-1, blank=True, null=True)
    name = models.CharField(max_length=-1, blank=True, null=True)
    format = models.CharField(max_length=-1)
    data = models.BinaryField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'base_language_export'


class BaseLanguageImport(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    code = models.CharField(max_length=5)
    data = models.BinaryField()
    name = models.CharField(max_length=64)
    overwrite = models.NullBooleanField()

    class Meta:
        managed = False
        db_table = 'base_language_import'


class BaseLanguageInstall(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    lang = models.CharField(max_length=-1)
    state = models.CharField(max_length=-1, blank=True, null=True)
    overwrite = models.NullBooleanField()

    class Meta:
        managed = False
        db_table = 'base_language_install'


class BaseModuleConfiguration(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'base_module_configuration'


class BaseModuleImport(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    module_name = models.CharField(max_length=128, blank=True, null=True)
    module_file = models.BinaryField()
    state = models.CharField(max_length=-1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'base_module_import'


class BaseModuleUpdate(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    add = models.IntegerField(blank=True, null=True)
    update = models.IntegerField(blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'base_module_update'


class BaseModuleUpgrade(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    module_info = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'base_module_upgrade'


class BaseUpdateTranslations(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    lang = models.CharField(max_length=-1)

    class Meta:
        managed = False
        db_table = 'base_update_translations'


class ChangePasswordUser(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    user_login = models.CharField(max_length=-1, blank=True, null=True)
    user = models.ForeignKey('ResUsers')
    new_passwd = models.CharField(max_length=-1, blank=True, null=True)
    wizard = models.ForeignKey('ChangePasswordWizard')

    class Meta:
        managed = False
        db_table = 'change_password_user'


class ChangePasswordWizard(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'change_password_wizard'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', blank=True, null=True)
    user = models.ForeignKey(AuthUser)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class IrActClient(models.Model):
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    help = models.TextField(blank=True, null=True)
    res_model = models.CharField(max_length=64, blank=True, null=True)
    params_store = models.BinaryField(blank=True, null=True)
    tag = models.CharField(max_length=64)
    context = models.CharField(max_length=250)

    class Meta:
        managed = False
        db_table = 'ir_act_client'


class IrActReportCustom(models.Model):
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True, null=True)
    report_id = models.IntegerField(blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    help = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_act_report_custom'


class IrActReportXml(models.Model):
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True, null=True)
    model = models.CharField(max_length=64)
    report_name = models.CharField(max_length=64)
    report_xsl = models.CharField(max_length=256, blank=True, null=True)
    report_xml = models.CharField(max_length=256, blank=True, null=True)
    auto = models.NullBooleanField()
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    help = models.TextField(blank=True, null=True)
    report_rml_content_data = models.BinaryField(blank=True, null=True)
    header = models.NullBooleanField()
    report_type = models.CharField(max_length=32)
    report_file = models.CharField(max_length=256, blank=True, null=True)
    multi = models.NullBooleanField()
    report_rml = models.CharField(max_length=256, blank=True, null=True)
    attachment = models.CharField(max_length=128, blank=True, null=True)
    report_sxw_content_data = models.BinaryField(blank=True, null=True)
    attachment_use = models.NullBooleanField()

    class Meta:
        managed = False
        db_table = 'ir_act_report_xml'


class IrActServer(models.Model):
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    help = models.TextField(blank=True, null=True)
    model = models.ForeignKey('IrModel')
    code = models.TextField(blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    sms = models.CharField(max_length=160, blank=True, null=True)
    write_id = models.CharField(max_length=256, blank=True, null=True)
    srcmodel = models.ForeignKey('IrModel', blank=True, null=True)
    message = models.TextField(blank=True, null=True)
    trigger_name = models.CharField(max_length=128, blank=True, null=True)
    condition = models.CharField(max_length=256)
    subject = models.CharField(max_length=1024, blank=True, null=True)
    loop_action = models.ForeignKey('self', db_column='loop_action', blank=True, null=True)
    trigger_obj = models.ForeignKey('IrModelFields', blank=True, null=True)
    mobile = models.CharField(max_length=512, blank=True, null=True)
    copy_object = models.CharField(max_length=256, blank=True, null=True)
    wkf_model = models.ForeignKey('IrModel', blank=True, null=True)
    state = models.CharField(max_length=32)
    record = models.ForeignKey('IrModelFields', blank=True, null=True)
    expression = models.CharField(max_length=512, blank=True, null=True)
    email = models.CharField(max_length=512, blank=True, null=True)
    action_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_act_server'


class IrActUrl(models.Model):
    name = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True, null=True)
    url = models.TextField()
    target = models.CharField(max_length=64)
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    help = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_act_url'


class IrActWindow(models.Model):
    name = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True, null=True)
    view = models.ForeignKey('IrUiView', blank=True, null=True)
    res_model = models.CharField(max_length=64)
    view_type = models.CharField(max_length=16)
    domain = models.CharField(max_length=250, blank=True, null=True)
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    help = models.TextField(blank=True, null=True)
    search_view = models.ForeignKey('IrUiView', blank=True, null=True)
    auto_refresh = models.IntegerField(blank=True, null=True)
    view_mode = models.CharField(max_length=250)
    multi = models.NullBooleanField()
    context = models.CharField(max_length=250)
    target = models.CharField(max_length=-1, blank=True, null=True)
    auto_search = models.NullBooleanField()
    filter = models.NullBooleanField()
    src_model = models.CharField(max_length=64, blank=True, null=True)
    limit = models.IntegerField(blank=True, null=True)
    res_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_act_window'


class IrActWindowGroupRel(models.Model):
    act = models.ForeignKey(IrActWindow)
    gid = models.ForeignKey('ResGroups', db_column='gid')

    class Meta:
        managed = False
        db_table = 'ir_act_window_group_rel'
        unique_together = (('act_id', 'gid'),)


class IrActWindowView(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    act_window = models.ForeignKey(IrActWindow, blank=True, null=True)
    multi = models.NullBooleanField()
    view_mode = models.CharField(max_length=-1)
    view = models.ForeignKey('IrUiView', blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_act_window_view'
        unique_together = (('act_window_id', 'view_mode'),)


class IrActWizard(models.Model):
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True, null=True)
    wiz_name = models.CharField(max_length=64)
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    help = models.TextField(blank=True, null=True)
    multi = models.NullBooleanField()
    model = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_act_wizard'


class IrActions(models.Model):
    name = models.CharField(max_length=64)
    type = models.CharField(max_length=32)
    usage = models.CharField(max_length=32, blank=True, null=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    help = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_actions'


class IrActionsConfigurationWizard(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    note = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_actions_configuration_wizard'


class IrActionsTodo(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    state = models.CharField(max_length=-1)
    name = models.CharField(max_length=64, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=-1)
    action_id = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'ir_actions_todo'


class IrAttachment(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    datas_fname = models.CharField(max_length=256, blank=True, null=True)
    url = models.CharField(max_length=1024, blank=True, null=True)
    res_model = models.CharField(max_length=64, blank=True, null=True)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    res_name = models.CharField(max_length=128, blank=True, null=True)
    type = models.CharField(max_length=-1)
    res_id = models.IntegerField(blank=True, null=True)
    file_size = models.IntegerField(blank=True, null=True)
    db_datas = models.BinaryField(blank=True, null=True)
    store_fname = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(max_length=256)

    class Meta:
        managed = False
        db_table = 'ir_attachment'


class IrConfigParameter(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    key = models.CharField(unique=True, max_length=256)
    value = models.TextField()

    class Meta:
        managed = False
        db_table = 'ir_config_parameter'


class IrCron(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    function = models.CharField(max_length=64, blank=True, null=True)
    interval_type = models.CharField(max_length=-1, blank=True, null=True)
    user = models.ForeignKey('ResUsers')
    name = models.CharField(max_length=60)
    args = models.TextField(blank=True, null=True)
    numbercall = models.IntegerField(blank=True, null=True)
    nextcall = models.DateTimeField()
    priority = models.IntegerField(blank=True, null=True)
    doall = models.NullBooleanField()
    active = models.NullBooleanField()
    interval_number = models.IntegerField(blank=True, null=True)
    model = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_cron'


class IrDefault(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    uid = models.ForeignKey('ResUsers', db_column='uid', blank=True, null=True)
    ref_table = models.CharField(max_length=64, blank=True, null=True)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    value = models.CharField(max_length=64, blank=True, null=True)
    ref_id = models.IntegerField(blank=True, null=True)
    field_tbl = models.CharField(max_length=64, blank=True, null=True)
    field_name = models.CharField(max_length=64, blank=True, null=True)
    page = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_default'


class IrExports(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    resource = models.CharField(max_length=128, blank=True, null=True)
    name = models.CharField(max_length=128, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_exports'


class IrExportsLine(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    export = models.ForeignKey(IrExports, blank=True, null=True)
    name = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_exports_line'


class IrFieldsConverter(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_fields_converter'


class IrFilters(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    is_default = models.NullBooleanField()
    model_id = models.CharField(max_length=-1)
    domain = models.TextField()
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    name = models.CharField(max_length=64)
    context = models.TextField()

    class Meta:
        managed = False
        db_table = 'ir_filters'
        unique_together = (('None', 'model_id', 'None'), ('name', 'model_id', 'user_id'),)


class IrMailServer(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    sequence = models.IntegerField(blank=True, null=True)
    smtp_port = models.IntegerField()
    smtp_host = models.CharField(max_length=128)
    smtp_user = models.CharField(max_length=64, blank=True, null=True)
    smtp_pass = models.CharField(max_length=64, blank=True, null=True)
    smtp_debug = models.NullBooleanField()
    active = models.NullBooleanField()
    smtp_encryption = models.CharField(max_length=-1)

    class Meta:
        managed = False
        db_table = 'ir_mail_server'


class IrModel(models.Model):
    model = models.CharField(unique=True, max_length=64)
    name = models.CharField(max_length=64)
    state = models.CharField(max_length=16, blank=True, null=True)
    info = models.TextField(blank=True, null=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_model'


class IrModelAccess(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    model = models.ForeignKey(IrModel)
    perm_read = models.NullBooleanField()
    name = models.CharField(max_length=64)
    perm_write = models.NullBooleanField()
    perm_unlink = models.NullBooleanField()
    active = models.NullBooleanField()
    perm_create = models.NullBooleanField()
    group = models.ForeignKey('ResGroups', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_model_access'


class IrModelConstraint(models.Model):
    id = models.AutoField()
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    date_init = models.DateTimeField(blank=True, null=True)
    date_update = models.DateTimeField(blank=True, null=True)
    module = models.ForeignKey('IrModuleModule', db_column='module')
    model = models.ForeignKey(IrModel, db_column='model')
    type = models.CharField(max_length=1)
    name = models.CharField(max_length=128)

    class Meta:
        managed = False
        db_table = 'ir_model_constraint'
        unique_together = (('name', 'module'),)


class IrModelData(models.Model):
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    noupdate = models.NullBooleanField()
    name = models.CharField(max_length=128)
    date_init = models.DateTimeField(blank=True, null=True)
    date_update = models.DateTimeField(blank=True, null=True)
    module = models.CharField(max_length=64)
    model = models.CharField(max_length=64)
    res_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_model_data'
        unique_together = (('name', 'module'),)


class IrModelFields(models.Model):
    model = models.CharField(max_length=64)
    model_0 = models.ForeignKey(IrModel, db_column='model_id')  # Field renamed because of name conflict.
    name = models.CharField(max_length=64)
    relation = models.CharField(max_length=64, blank=True, null=True)
    select_level = models.CharField(max_length=4)
    field_description = models.CharField(max_length=256)
    ttype = models.CharField(max_length=64)
    state = models.CharField(max_length=64)
    view_load = models.NullBooleanField()
    relate = models.NullBooleanField()
    relation_field = models.CharField(max_length=128, blank=True, null=True)
    translate = models.NullBooleanField()
    serialization_field = models.ForeignKey('self', blank=True, null=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    domain = models.CharField(max_length=256, blank=True, null=True)
    selection = models.CharField(max_length=128, blank=True, null=True)
    on_delete = models.CharField(max_length=-1, blank=True, null=True)
    selectable = models.NullBooleanField()
    size = models.IntegerField(blank=True, null=True)
    required = models.NullBooleanField()
    readonly = models.NullBooleanField()
    complete_name = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_model_fields'


class IrModelFieldsGroupRel(models.Model):
    field = models.ForeignKey(IrModelFields)
    group = models.ForeignKey('ResGroups')

    class Meta:
        managed = False
        db_table = 'ir_model_fields_group_rel'
        unique_together = (('field_id', 'group_id'),)


class IrModelRelation(models.Model):
    id = models.AutoField()
    create_uid = models.IntegerField(blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.IntegerField(blank=True, null=True)
    date_init = models.DateTimeField(blank=True, null=True)
    date_update = models.DateTimeField(blank=True, null=True)
    module = models.ForeignKey('IrModuleModule', db_column='module')
    model = models.ForeignKey(IrModel, db_column='model')
    name = models.CharField(max_length=128)

    class Meta:
        managed = False
        db_table = 'ir_model_relation'


class IrModuleCategory(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    name = models.CharField(max_length=128)
    sequence = models.IntegerField(blank=True, null=True)
    visible = models.NullBooleanField()
    description = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_module_category'


class IrModuleModule(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    website = models.CharField(max_length=256, blank=True, null=True)
    summary = models.CharField(max_length=256, blank=True, null=True)
    name = models.CharField(unique=True, max_length=128)
    author = models.CharField(max_length=128, blank=True, null=True)
    url = models.CharField(max_length=128, blank=True, null=True)
    state = models.CharField(max_length=16, blank=True, null=True)
    latest_version = models.CharField(max_length=64, blank=True, null=True)
    shortdesc = models.CharField(max_length=256, blank=True, null=True)
    complexity = models.CharField(max_length=32, blank=True, null=True)
    category = models.ForeignKey(IrModuleCategory, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    application = models.NullBooleanField()
    demo = models.NullBooleanField()
    web = models.NullBooleanField()
    license = models.CharField(max_length=32, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    auto_install = models.NullBooleanField()
    menus_by_module = models.TextField(blank=True, null=True)
    maintainer = models.CharField(max_length=128, blank=True, null=True)
    contributors = models.TextField(blank=True, null=True)
    views_by_module = models.TextField(blank=True, null=True)
    icon = models.CharField(max_length=128, blank=True, null=True)
    reports_by_module = models.TextField(blank=True, null=True)
    published_version = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_module_module'


class IrModuleModuleDependency(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=128, blank=True, null=True)
    version_pattern = models.CharField(max_length=128, blank=True, null=True)
    module = models.ForeignKey(IrModuleModule, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_module_module_dependency'


class IrProperty(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    value_text = models.TextField(blank=True, null=True)
    value_float = models.FloatField(blank=True, null=True)
    name = models.CharField(max_length=128, blank=True, null=True)
    value_integer = models.IntegerField(blank=True, null=True)
    type = models.CharField(max_length=-1)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    fields = models.ForeignKey(IrModelFields)
    value_datetime = models.DateTimeField(blank=True, null=True)
    value_binary = models.BinaryField(blank=True, null=True)
    value_reference = models.CharField(max_length=128, blank=True, null=True)
    res_id = models.CharField(max_length=128, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_property'


class IrRule(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    model = models.ForeignKey(IrModel)
    domain_force = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=128, blank=True, null=True)
    global_field = models.NullBooleanField(db_column='global')  # Field renamed because it was a Python reserved word.
    active = models.NullBooleanField()
    perm_unlink = models.NullBooleanField()
    perm_write = models.NullBooleanField()
    perm_read = models.NullBooleanField()
    perm_create = models.NullBooleanField()

    class Meta:
        managed = False
        db_table = 'ir_rule'


class IrSequence(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    code = models.CharField(max_length=64, blank=True, null=True)
    suffix = models.CharField(max_length=64, blank=True, null=True)
    number_next = models.IntegerField()
    number_increment = models.IntegerField()
    implementation = models.CharField(max_length=-1)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    padding = models.IntegerField()
    active = models.NullBooleanField()
    prefix = models.CharField(max_length=64, blank=True, null=True)
    name = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'ir_sequence'


class IrSequenceType(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    code = models.CharField(unique=True, max_length=32)
    name = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'ir_sequence_type'


class IrServerObjectLines(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    server = models.ForeignKey(IrActServer, blank=True, null=True)
    type = models.CharField(max_length=32)
    value = models.TextField()
    col1 = models.ForeignKey(IrModelFields, db_column='col1')

    class Meta:
        managed = False
        db_table = 'ir_server_object_lines'


class IrTranslation(models.Model):
    lang = models.ForeignKey('ResLang', db_column='lang', blank=True, null=True)
    src = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=-1)
    res_id = models.IntegerField(blank=True, null=True)
    module = models.CharField(max_length=-1, blank=True, null=True)
    state = models.CharField(max_length=-1, blank=True, null=True)
    value = models.TextField(blank=True, null=True)
    type = models.CharField(max_length=-1, blank=True, null=True)
    comments = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_translation'


class IrUiMenu(models.Model):
    parent = models.ForeignKey('self', blank=True, null=True)
    name = models.CharField(max_length=64)
    icon = models.CharField(max_length=64, blank=True, null=True)
    parent_left = models.IntegerField(blank=True, null=True)
    parent_right = models.IntegerField(blank=True, null=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    web_icon_data = models.BinaryField(blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    web_icon_hover = models.CharField(max_length=128, blank=True, null=True)
    web_icon_hover_data = models.BinaryField(blank=True, null=True)
    needaction_enabled = models.NullBooleanField()
    web_icon = models.CharField(max_length=128, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_ui_menu'


class IrUiMenuGroupRel(models.Model):
    menu = models.ForeignKey(IrUiMenu)
    gid = models.ForeignKey('ResGroups', db_column='gid')

    class Meta:
        managed = False
        db_table = 'ir_ui_menu_group_rel'
        unique_together = (('menu_id', 'gid'),)


class IrUiView(models.Model):
    model = models.CharField(max_length=64)
    type = models.CharField(max_length=64)
    arch = models.TextField()
    field_parent = models.CharField(max_length=64, blank=True, null=True)
    priority = models.IntegerField()
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    inherit = models.ForeignKey('self', blank=True, null=True)
    name = models.CharField(max_length=-1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_ui_view'


class IrUiViewCustom(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    user = models.ForeignKey('ResUsers')
    arch = models.TextField()
    ref = models.ForeignKey(IrUiView)

    class Meta:
        managed = False
        db_table = 'ir_ui_view_custom'


class IrUiViewGroupRel(models.Model):
    view = models.ForeignKey(IrUiView)
    group = models.ForeignKey('ResGroups')

    class Meta:
        managed = False
        db_table = 'ir_ui_view_group_rel'
        unique_together = (('view_id', 'group_id'),)


class IrUiViewSc(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    user = models.ForeignKey('ResUsers')
    res_id = models.IntegerField(blank=True, null=True)
    resource = models.CharField(max_length=64)
    name = models.CharField(max_length=64, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_ui_view_sc'
        unique_together = (('res_id', 'resource', 'user_id'),)


class IrValues(models.Model):
    name = models.CharField(max_length=128)
    key = models.CharField(max_length=128)
    key2 = models.CharField(max_length=256, blank=True, null=True)
    model = models.CharField(max_length=128)
    value = models.TextField(blank=True, null=True)
    meta = models.TextField(blank=True, null=True)
    res_id = models.IntegerField(blank=True, null=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    model_0 = models.ForeignKey(IrModel, db_column='model_id', blank=True, null=True)  # Field renamed because of name conflict.
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    company = models.ForeignKey('ResCompany', blank=True, null=True)
    action_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ir_values'


class MultiCompanyDefault(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=256)
    sequence = models.IntegerField(blank=True, null=True)
    expression = models.CharField(max_length=256)
    company_dest = models.ForeignKey('ResCompany')
    field = models.ForeignKey(IrModelFields, blank=True, null=True)
    company = models.ForeignKey('ResCompany')
    object = models.ForeignKey(IrModel)

    class Meta:
        managed = False
        db_table = 'multi_company_default'


class OsvMemoryAutovacuum(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'osv_memory_autovacuum'


class RelModulesLangexport(models.Model):
    wiz = models.ForeignKey(BaseLanguageExport)
    module = models.ForeignKey(IrModuleModule)

    class Meta:
        managed = False
        db_table = 'rel_modules_langexport'
        unique_together = (('wiz_id', 'module_id'),)


class RelServerActions(models.Model):
    server = models.ForeignKey(IrActServer)
    action = models.ForeignKey(IrActServer)

    class Meta:
        managed = False
        db_table = 'rel_server_actions'
        unique_together = (('server_id', 'action_id'),)


class ResBank(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    city = models.CharField(max_length=128, blank=True, null=True)
    fax = models.CharField(max_length=64, blank=True, null=True)
    name = models.CharField(max_length=128)
    zip = models.CharField(max_length=24, blank=True, null=True)
    country = models.ForeignKey('ResCountry', db_column='country', blank=True, null=True)
    street2 = models.CharField(max_length=128, blank=True, null=True)
    bic = models.CharField(max_length=64, blank=True, null=True)
    phone = models.CharField(max_length=64, blank=True, null=True)
    state = models.ForeignKey('ResCountryState', db_column='state', blank=True, null=True)
    street = models.CharField(max_length=128, blank=True, null=True)
    active = models.NullBooleanField()
    email = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'res_bank'


class ResCompany(models.Model):
    name = models.CharField(unique=True, max_length=128)
    parent = models.ForeignKey('self', blank=True, null=True)
    partner = models.ForeignKey('ResPartner')
    currency = models.ForeignKey('ResCurrency')
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    rml_footer = models.TextField(blank=True, null=True)
    rml_header = models.TextField()
    paper_format = models.CharField(max_length=-1)
    logo_web = models.BinaryField(blank=True, null=True)
    rml_header2 = models.TextField()
    rml_header3 = models.TextField()
    rml_header1 = models.CharField(max_length=200, blank=True, null=True)
    account_no = models.CharField(max_length=64, blank=True, null=True)
    company_registry = models.CharField(max_length=64, blank=True, null=True)
    custom_footer = models.NullBooleanField()

    class Meta:
        managed = False
        db_table = 'res_company'


class ResCompanyUsersRel(models.Model):
    cid = models.ForeignKey(ResCompany, db_column='cid')
    user = models.ForeignKey('ResUsers')

    class Meta:
        managed = False
        db_table = 'res_company_users_rel'
        unique_together = (('cid', 'user_id'),)


class ResConfig(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'res_config'


class ResConfigInstaller(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'res_config_installer'


class ResConfigSettings(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'res_config_settings'


class ResCountry(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    address_format = models.TextField(blank=True, null=True)
    currency = models.ForeignKey('ResCurrency', blank=True, null=True)
    code = models.CharField(unique=True, max_length=2, blank=True, null=True)
    name = models.CharField(unique=True, max_length=64)

    class Meta:
        managed = False
        db_table = 'res_country'


class ResCountryState(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    code = models.CharField(max_length=3)
    country = models.ForeignKey(ResCountry)
    name = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'res_country_state'


class ResCurrency(models.Model):
    name = models.CharField(max_length=32)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    rounding = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    symbol = models.CharField(max_length=4, blank=True, null=True)
    company = models.ForeignKey(ResCompany, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    base = models.NullBooleanField()
    active = models.NullBooleanField()
    position = models.CharField(max_length=-1, blank=True, null=True)
    accuracy = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'res_currency'
        unique_together = (('name', 'None'), ('name', 'company_id'),)


class ResCurrencyRate(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    currency = models.ForeignKey(ResCurrency, blank=True, null=True)
    rate = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    name = models.DateField()
    currency_rate_type = models.ForeignKey('ResCurrencyRateType', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'res_currency_rate'


class ResCurrencyRateType(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'res_currency_rate_type'


class ResGroups(models.Model):
    name = models.CharField(max_length=64)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    comment = models.TextField(blank=True, null=True)
    category = models.ForeignKey(IrModuleCategory, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'res_groups'
        unique_together = (('category_id', 'name'),)


class ResGroupsActionRel(models.Model):
    uid = models.ForeignKey(IrActionsTodo, db_column='uid')
    gid = models.ForeignKey(ResGroups, db_column='gid')

    class Meta:
        managed = False
        db_table = 'res_groups_action_rel'
        unique_together = (('uid', 'gid'),)


class ResGroupsImpliedRel(models.Model):
    gid = models.ForeignKey(ResGroups, db_column='gid')
    hid = models.ForeignKey(ResGroups, db_column='hid')

    class Meta:
        managed = False
        db_table = 'res_groups_implied_rel'
        unique_together = (('gid', 'hid'),)


class ResGroupsReportRel(models.Model):
    uid = models.ForeignKey(IrActReportXml, db_column='uid')
    gid = models.ForeignKey(ResGroups, db_column='gid')

    class Meta:
        managed = False
        db_table = 'res_groups_report_rel'
        unique_together = (('uid', 'gid'),)


class ResGroupsUsersRel(models.Model):
    uid = models.ForeignKey('ResUsers', db_column='uid')
    gid = models.ForeignKey(ResGroups, db_column='gid')

    class Meta:
        managed = False
        db_table = 'res_groups_users_rel'
        unique_together = (('uid', 'gid'),)


class ResGroupsWizardRel(models.Model):
    uid = models.ForeignKey(IrActWizard, db_column='uid')
    gid = models.ForeignKey(ResGroups, db_column='gid')

    class Meta:
        managed = False
        db_table = 'res_groups_wizard_rel'
        unique_together = (('uid', 'gid'),)


class ResLang(models.Model):
    name = models.CharField(unique=True, max_length=64)
    code = models.CharField(unique=True, max_length=16)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    date_format = models.CharField(max_length=64)
    direction = models.CharField(max_length=-1)
    thousands_sep = models.CharField(max_length=64, blank=True, null=True)
    translatable = models.NullBooleanField()
    time_format = models.CharField(max_length=64)
    decimal_point = models.CharField(max_length=64)
    active = models.NullBooleanField()
    iso_code = models.CharField(max_length=16, blank=True, null=True)
    grouping = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'res_lang'


class ResPartner(models.Model):
    name = models.CharField(max_length=128)
    lang = models.CharField(max_length=64, blank=True, null=True)
    company = models.ForeignKey(ResCompany, blank=True, null=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    comment = models.TextField(blank=True, null=True)
    ean13 = models.CharField(max_length=13, blank=True, null=True)
    color = models.IntegerField(blank=True, null=True)
    image = models.BinaryField(blank=True, null=True)
    use_parent_address = models.NullBooleanField()
    active = models.NullBooleanField()
    street = models.CharField(max_length=128, blank=True, null=True)
    supplier = models.NullBooleanField()
    city = models.CharField(max_length=128, blank=True, null=True)
    user = models.ForeignKey('ResUsers', blank=True, null=True)
    zip = models.CharField(max_length=24, blank=True, null=True)
    title = models.ForeignKey('ResPartnerTitle', db_column='title', blank=True, null=True)
    function = models.CharField(max_length=128, blank=True, null=True)
    country = models.ForeignKey(ResCountry, blank=True, null=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    employee = models.NullBooleanField()
    type = models.CharField(max_length=-1, blank=True, null=True)
    email = models.CharField(max_length=240, blank=True, null=True)
    vat = models.CharField(max_length=32, blank=True, null=True)
    website = models.CharField(max_length=64, blank=True, null=True)
    fax = models.CharField(max_length=64, blank=True, null=True)
    street2 = models.CharField(max_length=128, blank=True, null=True)
    phone = models.CharField(max_length=64, blank=True, null=True)
    credit_limit = models.FloatField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    tz = models.CharField(max_length=64, blank=True, null=True)
    customer = models.NullBooleanField()
    image_medium = models.BinaryField(blank=True, null=True)
    mobile = models.CharField(max_length=64, blank=True, null=True)
    ref = models.CharField(max_length=64, blank=True, null=True)
    image_small = models.BinaryField(blank=True, null=True)
    birthdate = models.CharField(max_length=64, blank=True, null=True)
    is_company = models.NullBooleanField()
    state = models.ForeignKey(ResCountryState, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'res_partner'


class ResPartnerBank(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    bank_name = models.CharField(max_length=32, blank=True, null=True)
    owner_name = models.CharField(max_length=128, blank=True, null=True)
    sequence = models.IntegerField(blank=True, null=True)
    street = models.CharField(max_length=128, blank=True, null=True)
    partner = models.ForeignKey(ResPartner)
    bank = models.ForeignKey(ResBank, db_column='bank', blank=True, null=True)
    bank_bic = models.CharField(max_length=16, blank=True, null=True)
    city = models.CharField(max_length=128, blank=True, null=True)
    name = models.CharField(max_length=64, blank=True, null=True)
    zip = models.CharField(max_length=24, blank=True, null=True)
    footer = models.NullBooleanField()
    country = models.ForeignKey(ResCountry, blank=True, null=True)
    company = models.ForeignKey(ResCompany, blank=True, null=True)
    state = models.CharField(max_length=-1)
    state_0 = models.ForeignKey(ResCountryState, db_column='state_id', blank=True, null=True)  # Field renamed because of name conflict.
    acc_number = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'res_partner_bank'


class ResPartnerBankType(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    code = models.CharField(max_length=64)
    name = models.CharField(max_length=64)
    format_layout = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'res_partner_bank_type'


class ResPartnerBankTypeField(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    bank_type = models.ForeignKey(ResPartnerBankType)
    readonly = models.NullBooleanField()
    required = models.NullBooleanField()
    name = models.CharField(max_length=64)
    size = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'res_partner_bank_type_field'


class ResPartnerCategory(models.Model):
    parent_left = models.IntegerField(blank=True, null=True)
    parent_right = models.IntegerField(blank=True, null=True)
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    name = models.CharField(max_length=64)
    parent = models.ForeignKey('self', blank=True, null=True)
    active = models.NullBooleanField()

    class Meta:
        managed = False
        db_table = 'res_partner_category'


class ResPartnerResPartnerCategoryRel(models.Model):
    category = models.ForeignKey(ResPartnerCategory)
    partner = models.ForeignKey(ResPartner)

    class Meta:
        managed = False
        db_table = 'res_partner_res_partner_category_rel'
        unique_together = (('category_id', 'partner_id'),)


class ResPartnerTitle(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    domain = models.CharField(max_length=24)
    name = models.CharField(max_length=46)
    shortcut = models.CharField(max_length=16, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'res_partner_title'


class ResRequest(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    name = models.CharField(max_length=128)
    date_sent = models.DateTimeField(blank=True, null=True)
    ref_doc2 = models.CharField(max_length=128, blank=True, null=True)
    priority = models.CharField(max_length=-1)
    ref_doc1 = models.CharField(max_length=128, blank=True, null=True)
    state = models.CharField(max_length=-1)
    act_from = models.ForeignKey('ResUsers', db_column='act_from')
    ref_partner = models.ForeignKey(ResPartner, blank=True, null=True)
    active = models.NullBooleanField()
    trigger_date = models.DateTimeField(blank=True, null=True)
    act_to = models.ForeignKey('ResUsers', db_column='act_to')

    class Meta:
        managed = False
        db_table = 'res_request'


class ResRequestHistory(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    act_from = models.ForeignKey('ResUsers', db_column='act_from')
    name = models.CharField(max_length=128)
    req = models.ForeignKey(ResRequest)
    date_sent = models.DateTimeField()
    act_to = models.ForeignKey('ResUsers', db_column='act_to')

    class Meta:
        managed = False
        db_table = 'res_request_history'


class ResRequestLink(models.Model):
    create_uid = models.ForeignKey('ResUsers', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('ResUsers', db_column='write_uid', blank=True, null=True)
    priority = models.IntegerField(blank=True, null=True)
    object = models.CharField(max_length=64)
    name = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'res_request_link'


class ResUsers(models.Model):
    active = models.NullBooleanField()
    login = models.CharField(unique=True, max_length=64)
    password = models.CharField(max_length=64, blank=True, null=True)
    company = models.ForeignKey(ResCompany)
    partner = models.ForeignKey(ResPartner)
    create_uid = models.ForeignKey('self', db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey('self', db_column='write_uid', blank=True, null=True)
    menu_id = models.IntegerField(blank=True, null=True)
    login_date = models.DateField(blank=True, null=True)
    signature = models.TextField(blank=True, null=True)
    action_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'res_users'


class RuleGroupRel(models.Model):
    rule_group = models.ForeignKey(IrRule)
    group = models.ForeignKey(ResGroups)

    class Meta:
        managed = False
        db_table = 'rule_group_rel'
        unique_together = (('rule_group_id', 'group_id'),)


class WizardIrModelMenuCreate(models.Model):
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    menu = models.ForeignKey(IrUiMenu)
    name = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'wizard_ir_model_menu_create'


class Wkf(models.Model):
    name = models.CharField(max_length=64)
    osv = models.CharField(max_length=64)
    on_create = models.NullBooleanField()
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wkf'


class WkfActivity(models.Model):
    wkf = models.ForeignKey(Wkf)
    subflow = models.ForeignKey(Wkf, blank=True, null=True)
    split_mode = models.CharField(max_length=3)
    join_mode = models.CharField(max_length=3)
    kind = models.CharField(max_length=16)
    name = models.CharField(max_length=64)
    signal_send = models.CharField(max_length=32, blank=True, null=True)
    flow_start = models.NullBooleanField()
    flow_stop = models.NullBooleanField()
    action = models.TextField(blank=True, null=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    action_0 = models.ForeignKey(IrActServer, db_column='action_id', blank=True, null=True)  # Field renamed because of name conflict.

    class Meta:
        managed = False
        db_table = 'wkf_activity'


class WkfInstance(models.Model):
    wkf = models.ForeignKey(Wkf, blank=True, null=True)
    uid = models.IntegerField(blank=True, null=True)
    res_id = models.IntegerField(blank=True, null=True)
    res_type = models.CharField(max_length=64, blank=True, null=True)
    state = models.CharField(max_length=32, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wkf_instance'


class WkfLogs(models.Model):
    res_type = models.CharField(max_length=128)
    res_id = models.IntegerField()
    uid = models.ForeignKey(ResUsers, db_column='uid', blank=True, null=True)
    act = models.ForeignKey(WkfActivity, blank=True, null=True)
    time = models.TimeField()
    info = models.CharField(max_length=128, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wkf_logs'


class WkfTransition(models.Model):
    act_from = models.ForeignKey(WkfActivity, db_column='act_from')
    act_to = models.ForeignKey(WkfActivity, db_column='act_to')
    condition = models.CharField(max_length=128)
    trigger_type = models.CharField(max_length=128, blank=True, null=True)
    trigger_expr_id = models.CharField(max_length=128, blank=True, null=True)
    signal = models.CharField(max_length=64, blank=True, null=True)
    group = models.ForeignKey(ResGroups, blank=True, null=True)
    create_uid = models.ForeignKey(ResUsers, db_column='create_uid', blank=True, null=True)
    create_date = models.DateTimeField(blank=True, null=True)
    write_date = models.DateTimeField(blank=True, null=True)
    write_uid = models.ForeignKey(ResUsers, db_column='write_uid', blank=True, null=True)
    trigger_model = models.CharField(max_length=128, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wkf_transition'


class WkfTriggers(models.Model):
    instance = models.ForeignKey(WkfInstance, blank=True, null=True)
    workitem = models.ForeignKey('WkfWorkitem')
    model = models.CharField(max_length=128, blank=True, null=True)
    res_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wkf_triggers'


class WkfWitmTrans(models.Model):
    trans = models.ForeignKey(WkfTransition)
    inst = models.ForeignKey(WkfInstance)

    class Meta:
        managed = False
        db_table = 'wkf_witm_trans'


class WkfWorkitem(models.Model):
    act = models.ForeignKey(WkfActivity)
    inst = models.ForeignKey(WkfInstance)
    subflow = models.ForeignKey(WkfInstance, blank=True, null=True)
    state = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'wkf_workitem'
